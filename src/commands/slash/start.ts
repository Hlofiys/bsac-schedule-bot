import { InlineKeyboard } from "grammy";
import { UserRole, UserState } from '../../schemas/User';
import { inlineKeyboards, replyKeyboards } from '../../utils/keyboards';
import { MyContext } from "../../schemas/User";

export class StartCommand {
  async execute(ctx: MyContext) {
    // Check if this is a new user
    const isNewUser = !ctx.session || ctx.session.state === UserState.AskingFollowingEntity;
    
    if (isNewUser && ctx.session) {
      // For new users, the session is already initialized with AskingFollowingEntity state
      // We just need to send the initial messages
      await ctx.reply('üçâ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ë–ì–ê–°.\n–¢–æ–ª—å–∫–æ –º–Ω–µ –¥–ª—è —ç—Ç–æ–≥–æ –Ω—É–∂–Ω–æ –∑–Ω–∞—Ç—å –∫—Ç–æ —Ç—ã üò´');
      return await ctx.reply('ü§® –î–∞–≤–∞–π –æ–ø—Ä–µ–¥–µ–ª–∏–º—Å—è –æ—Ç –∫–∞–∫–æ–≥–æ –ª–∏—Ü–∞ —Ç—ã —Ç—É—Ç', {
        reply_markup: inlineKeyboards.chooseRole
      });
    }
  
    // Existing user
    if (!ctx.session) return;
    const state = ctx.session.state;
  
    switch (state) {
      case UserState.MainMenu: {
        return await ctx.reply('üçâ –•–≤–∞—Ç–∞–π –º–µ–Ω—é', {
          reply_markup: replyKeyboards[UserState.MainMenu]
        });
      }
      case UserState.AskingFollowingEntity: {
        const askingText = ctx.session.role !== UserRole.Teacher
          ? '–ü–æ–≥–æ–¥–∏, —è –ø–æ–∫–∞ –∂–¥—É –æ—Ç —Ç–µ–±—è –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã'
          : '–ü–æ–≥–æ–¥–∏, —è –ø–æ–∫–∞ –∂–¥—É –æ—Ç —Ç–µ–±—è –∏–Ω–∏—Ü–∏–∞–ª—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è';
        return await ctx.reply('üçÜ ' + askingText, {
          reply_markup: replyKeyboards[UserState.AskingFollowingEntity]
        });
      }
      case UserState.ChoosingFollowingEntity: {
        // Implementation will be completed when we add the full entity selection functionality
        if (ctx.session.role !== undefined) {
          return await ctx.reply('üëû –í—ã–±–µ—Ä–∏ ' + (ctx.session.role === UserRole.Teacher ? '–ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è' : '–≥—Ä—É–ø–ø—É'));
        }
        break;
      }
      case UserState.AskingWeekGroup: {
        await ctx.reply('ü•• –ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–π —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å', {
          reply_markup: replyKeyboards[UserState.AskingWeekGroup]
        });
        return;
      }
      case UserState.AskingWeekTeacher: {
        await ctx.reply('üìõ –ù–∞–ø–∏—à–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∫–æ—Ç–æ—Ä–æ–≥–æ —Ç—ã —Ö–æ—á–µ—à—å —É–∑–Ω–∞—Ç—å', {
          reply_markup: replyKeyboards[UserState.AskingWeekTeacher]
        });
        return;
      }
    }
  }
}
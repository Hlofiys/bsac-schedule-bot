import {
  AbstractSlashCommand,
  CommandContext,
  CommandUtils,
} from "../../utils/index.js";
import { GroupChat, GroupSetupState } from "../../schemas/Group.js";
import { InlineKeyboard } from "grammy";

export class GroupSetupCommand extends AbstractSlashCommand {
  constructor(utils: CommandUtils) {
    super("setup", utils);
  }

  async execute(ctx: CommandContext) {
    // Check if this is a group chat
    if (ctx.chat?.type !== "group" && ctx.chat?.type !== "supergroup") {
      await ctx.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!");
      return;
    }

    // Check if user is admin or special developer
    const DEVELOPER_USER_ID = parseInt(process.env.DEVELOPER_USER_ID || "0");
    const isDeveloper = ctx.from!.id === DEVELOPER_USER_ID;

    if (!isDeveloper) {
      try {
        const chatMember = await ctx.api.getChatMember(
          ctx.chat.id,
          ctx.from!.id
        );

        if (
          chatMember.status !== "administrator" &&
          chatMember.status !== "creator"
        ) {
          await ctx.reply(
            "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –≥—Ä—É–ø–ø—ã –º–æ–≥—É—Ç –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞—Ç—å –±–æ—Ç–∞!"
          );
          return;
        }
      } catch (error) {
        console.error("Error checking admin status:", error);
        await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!");
        return;
      }
    }

    const chatId = ctx.chat.id;
    let groupChat = await GroupChat.findOne({ chatId });

    if (!groupChat) {
      groupChat = new GroupChat({
        chatId,
        chatTitle: ctx.chat.title,
        isActive: true,
        scheduleTime: "08:00",
        timezone: "Europe/Minsk",
        sendBothSubgroups: true,
      });
      await groupChat.save();
    }

    groupChat.setupState = GroupSetupState.MainMenu;
    await groupChat.save();

    const keyboard = new InlineKeyboard()
      .text("üéì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", `group_setup:ask_group:${chatId}`)
      .row()
      .text("üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", `group_setup:ask_time:${chatId}`)
      .row()
      .text("üé≠ –†–µ–∂–∏–º –ø–æ–¥–≥—Ä—É–ø–ø", `group_setup:toggle_subgroups:${chatId}`)
      .row()
      .text(
        groupChat.isActive
          ? "üò¥ –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
          : "üéâ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
        `group_setup:toggle_active:${chatId}`
      );

    const statusText = this.getStatusText(groupChat);

    await ctx.reply(
      `üöÄ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã</b>\n\n${statusText}\n\nüëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`,
      {
        reply_markup: keyboard,
        parse_mode: "HTML",
      }
    );
  }

  private getStatusText(groupChat: GroupChat): string {
    let status = "";

    if (groupChat.selectedGroupNumber) {
      status += `üéì <b>–ì—Ä—É–ø–ø–∞:</b> ${groupChat.selectedGroupNumber}\n`;
    } else {
      status += `ü§î <b>–ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞</b>\n`;
    }

    status += `üïê <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> ${groupChat.scheduleTime}\n`;
    status += `üé≠ <b>–ü–æ–¥–≥—Ä—É–ø–ø—ã:</b> ${groupChat.sendBothSubgroups ? "–û–±–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã –æ—Ç–¥–µ–ª—å–Ω–æ" : "–í—Å–µ –∑–∞–Ω—è—Ç–∏—è –≤–º–µ—Å—Ç–µ"}\n`;
    status += `${groupChat.isActive ? "üéâ" : "üò¥"} <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> ${groupChat.isActive ? "–í–∫–ª—é—á–µ–Ω—ã" : "–û—Ç–∫–ª—é—á–µ–Ω—ã"}`;

    return status;
  }
}

export class GroupStatusCommand extends AbstractSlashCommand {
  constructor(utils: CommandUtils) {
    super("status", utils);
  }

  async execute(ctx: CommandContext) {
    // Check if this is a group chat
    if (ctx.chat?.type !== "group" && ctx.chat?.type !== "supergroup") {
      await ctx.reply("‚ùå –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–æ–≤—ã—Ö —á–∞—Ç–∞—Ö!");
      return;
    }

    const chatId = ctx.chat.id;
    const groupChat = await GroupChat.findOne({ chatId });

    if (!groupChat) {
      await ctx.reply(
        "‚ùå –ë–æ—Ç –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /setup –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏."
      );
      return;
    }

    const statusText = this.getStatusText(groupChat);
    await ctx.reply(`üìä <b>–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø–µ</b>\n\n${statusText}`, {
      parse_mode: "HTML",
    });
  }

  private getStatusText(groupChat: GroupChat): string {
    let status = "";

    if (groupChat.selectedGroupNumber) {
      status += `üéì <b>–ì—Ä—É–ø–ø–∞:</b> ${groupChat.selectedGroupNumber}\n`;
    } else {
      status += `ü§î <b>–ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞</b>\n`;
    }

    status += `üïê <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> ${groupChat.scheduleTime}\n`;
    status += `üé≠ <b>–ü–æ–¥–≥—Ä—É–ø–ø—ã:</b> ${groupChat.sendBothSubgroups ? "–û–±–µ –ø–æ–¥–≥—Ä—É–ø–ø—ã –æ—Ç–¥–µ–ª—å–Ω–æ" : "–í—Å–µ –∑–∞–Ω—è—Ç–∏—è –≤–º–µ—Å—Ç–µ"}\n`;
    status += `${groupChat.isActive ? "üéâ" : "üò¥"} <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> ${groupChat.isActive ? "–í–∫–ª—é—á–µ–Ω—ã" : "–û—Ç–∫–ª—é—á–µ–Ω—ã"}`;

    return status;
  }
}

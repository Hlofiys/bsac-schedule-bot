import { Composer } from "grammy";
import { EnhancedContext } from "../utils/context";
import { UserRole, UserState } from "../schemas/User";
import { replyKeyboards, batchButtons, callbackIdBuild } from "../utils/keyboards";
import { InlineKeyboard } from "grammy";

export const chatHandler = new Composer<EnhancedContext>();

chatHandler.on("message:text", async (ctx) => {
  if (!ctx.user) return;

  // Handle new user setup
  if (ctx.newUser) {
    await ctx.reply(
      "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –ë–ì–≠–£!\n\n" +
      "–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –≤—ã–±–µ—Ä–∏—Ç–µ —Å–≤–æ—é —Ä–æ–ª—å:",
      {
        reply_markup: {
          inline_keyboard: [
            [
              { text: "üë®‚Äçüéì –°—Ç—É–¥–µ–Ω—Ç", callback_data: "role:student" },
              { text: "üë®‚Äçüè´ –ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—å", callback_data: "role:teacher" }
            ]
          ]
        }
      }
    );
    return;
  }

  // Handle entity selection states
  if (ctx.user.state === UserState.AskingFollowingEntity) {
    const searchText = ctx.message.text;
    
    if (searchText.length < 2) {
      return await ctx.reply("üò® –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∑–∞–ø—Ä–æ—Å");
    }

    const isStudent = ctx.user.role !== UserRole.Teacher;
    
    if (isStudent) {
      // Handle group search
      try {
        // For now, create a mock group selection
        // In real implementation, you would call the API to search groups
        const mockGroups = [
          { id: searchText, name: searchText },
          { id: searchText + "–ê", name: searchText + "–ê" },
          { id: searchText + "–ë", name: searchText + "–ë" }
        ];

        if (mockGroups.length === 0) {
          return await ctx.reply("ü©º –¢–∞–∫–∏—Ö –≥—Ä—É–ø–ø —è –Ω–µ –≤–∏–¥–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä");
        }

        ctx.user.choosing_groups = mockGroups.map(g => ({ id: parseInt(g.id) || 0, groupNumber: g.name }));
        ctx.user.state = UserState.ChoosingFollowingEntity;
        await ctx.user.save();

        const buttons = batchButtons(
          mockGroups.map(g => 
            InlineKeyboard.text(g.name, callbackIdBuild("select_entity", [g.id]))
          )
        );

        await ctx.reply("üëû –í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É", {
          reply_markup: buttons
        });

        await ctx.reply("ü§®", {
          reply_markup: replyKeyboards[ctx.user.state]
        });

      } catch (error) {
        console.error("Error searching groups:", error);
        return await ctx.reply("üèåÔ∏è‚Äç‚ôÇÔ∏è –ì–û–û–û–û–û–û–õ –≤—ã–±–æ—Ä –≥—Ä—É–ø–ø—ã –ø–æ–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É —á—É—Ç—å –ø–æ–∑–∂–µ");
      }
    } else {
      // Handle teacher search
      try {
        // For now, create a mock teacher selection
        // In real implementation, you would call the API to search teachers
        const mockTeachers = [
          searchText,
          searchText + " –ò.–ò.",
          searchText + " –ü.–ü."
        ];

        if (mockTeachers.length === 0) {
          return await ctx.reply("ü´ê –¢–∞–∫–∏—Ö —è –Ω–µ –≤–∏–¥–∞–ª. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –¥—Ä—É–≥–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è");
        }

        ctx.user.choosing_teachers = mockTeachers;
        ctx.user.state = UserState.ChoosingFollowingEntity;
        await ctx.user.save();

        const buttons = batchButtons(
          mockTeachers.map(t => 
            InlineKeyboard.text(t, callbackIdBuild("select_entity", [t]))
          )
        );

        await ctx.reply("üëû –í—ã–±–µ—Ä–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", {
          reply_markup: buttons
        });

        await ctx.reply("ü§®", {
          reply_markup: replyKeyboards[ctx.user.state]
        });

      } catch (error) {
        console.error("Error searching teachers:", error);
        return await ctx.reply("ü´ê –ü–æ–∏—Å–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω");
      }
    }
  }

  // Handle subgroup selection
  if (ctx.user.state === UserState.AskingSubgroup) {
    const subgroupText = ctx.message.text;
    
    if (subgroupText === "1" || subgroupText === "2") {
      ctx.user.subgroup = parseInt(subgroupText);
      ctx.user.state = UserState.MainMenu;
      await ctx.user.save();

      await ctx.reply(`‚úÖ –ü–æ–¥–≥—Ä—É–ø–ø–∞ ${subgroupText} –≤—ã–±—Ä–∞–Ω–∞!`, {
        reply_markup: replyKeyboards[UserState.MainMenu]
      });
    } else if (subgroupText === "–û—Ç–º–µ–Ω–∞") {
      ctx.user.state = UserState.MainMenu;
      await ctx.user.save();

      await ctx.reply("‚ùå –û—Ç–º–µ–Ω–µ–Ω–æ", {
        reply_markup: replyKeyboards[UserState.MainMenu]
      });
    } else {
      await ctx.reply("üî¢ –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1 –∏–ª–∏ 2");
    }
  }

  // Handle week group/teacher search
  if (ctx.user.state === UserState.AskingWeekGroup) {
    const searchText = ctx.message.text;
    
    if (searchText.length < 2) {
      return await ctx.reply("üò® –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∑–∞–ø—Ä–æ—Å");
    }

    // Mock group search for week schedule
    const mockGroups = [
      { id: searchText, display: searchText }
    ];

    if (mockGroups.length === 0) {
      return await ctx.reply("ü•∫ –¢–∞–∫–æ–π –≥—Ä—É–ø–ø—ã –Ω–µ –Ω–∞—à–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã");
    }

    ctx.user.state = UserState.MainMenu;
    await ctx.user.save();

    await ctx.reply("ü§®", {
      reply_markup: replyKeyboards[ctx.user.state]
    });

    const buttons = batchButtons(
      mockGroups.map(g => 
        InlineKeyboard.text(g.display, callbackIdBuild("group_week", [g.id]))
      ),
      3
    );

    await ctx.reply("üçç –í—ã–±–µ—Ä–∏ –≥—Ä—É–ø–ø—É", {
      reply_markup: buttons
    });
  }

  if (ctx.user.state === UserState.AskingWeekTeacher) {
    const searchText = ctx.message.text;
    
    if (searchText.length < 3) {
      return await ctx.reply("üò® –î–∞–≤–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–µ–µ, —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–∏–π –∑–∞–ø—Ä–æ—Å");
    }

    // Mock teacher search for week schedule
    const mockTeachers = [searchText, searchText + " –ò.–ò."];

    if (mockTeachers.length === 0) {
      return await ctx.reply("ü•∫ –¢–∞–∫–æ–≥–æ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –Ω–µ –Ω–∞—à–ª–æ—Å—å. –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –ø–æ-–¥—Ä—É–≥–æ–º—É");
    }

    ctx.user.state = UserState.MainMenu;
    await ctx.user.save();

    await ctx.reply("ü§®", {
      reply_markup: replyKeyboards[ctx.user.state]
    });

    const buttons = batchButtons(
      mockTeachers.map(t => 
        InlineKeyboard.text(t, callbackIdBuild("teacher_week", [t]))
      ),
      3
    );

    await ctx.reply("üçç –í—ã–±–µ—Ä–∏ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è", {
      reply_markup: buttons
    });
  }
});
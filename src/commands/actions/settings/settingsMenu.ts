import { Composer } from "grammy";
import { EnhancedContext } from "../../../utils/context";
import { UserRole, UserState } from "../../../schemas/User";
import { callbackIdParse, inlineKeyboards, replyKeyboards } from "../../../utils/keyboards";
import { InlineKeyboard } from "grammy";

export const settingsMenuHandler = new Composer<EnhancedContext>();

settingsMenuHandler.callbackQuery(/settings.*/, async (ctx) => {
  const match = ctx.match;
  if (!match) return;
  
  // If match is an array (from regex), get the full match string
  const matchString = Array.isArray(match) ? match[0] : match;
  const [, ...args] = callbackIdParse(matchString);
  const [settingName, chosenRole] = args;
  
  if (!ctx.user) return;

  switch (settingName) {
    case 'role': {
      if (chosenRole?.length) {
        const role = chosenRole === 'teacher' ? UserRole.Teacher : UserRole.Student;
        ctx.user.role = role;
        ctx.user.state = UserState.AskingFollowingEntity;
        // Clear selections
        ctx.user.selectedGroup = undefined;
        ctx.user.selectedTeacher = undefined;
        ctx.user.selectedSubject = undefined;
        ctx.user.subgroup = undefined;
        // Clear temporary arrays
        ctx.user.choosing_groups = [];
        ctx.user.choosing_teachers = [];
        await ctx.user.save();
        
        const askingText = role === UserRole.Student
          ? '–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ —Å–≤–æ—é –≥—Ä—É–ø–ø—É'
          : '–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è (–∏–ª–∏ –∏—Ö —á–∞—Å—Ç—å)';
        
        // Remove keyboard
        await ctx.reply('ü§®', {
          reply_markup: new InlineKeyboard()
        });
        
        return await ctx.editMessageText('ü¶´ ' + askingText);
      }
      
      return await ctx.editMessageText('ü§∏ –í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é —Ä–æ–ª—å', {
        reply_markup: inlineKeyboards.chooseRole
      });
    }
    case 'change_following': {
      ctx.user.state = UserState.AskingFollowingEntity;
      // Clear previous selections
      ctx.user.selectedGroup = undefined;
      ctx.user.selectedTeacher = undefined;
      ctx.user.selectedSubject = undefined;
      ctx.user.subgroup = undefined;
      // Clear temporary arrays
      ctx.user.choosing_groups = [];
      ctx.user.choosing_teachers = [];
      await ctx.user.save();
      
      const isStudent = ctx.user.role !== UserRole.Teacher;
      const askingText = isStudent
        ? '–ù–∞–ø–∏—à–∏ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã'
        : '–ù–∞–ø–∏—à–∏ –∏–Ω–∏—Ü–∏–∞–ª—ã –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è –∏–ª–∏ –∏—Ö —á–∞—Å—Ç—å';
      
      return await ctx.editMessageText('ü§∫ ' + askingText);
    }
    case 'change_subgroup': {
      if (ctx.user.role !== UserRole.Teacher && ctx.user.selectedGroup) {
        ctx.user.state = UserState.AskingSubgroup;
        await ctx.user.save();
        
        await ctx.editMessageText('üî¢ –í—ã–±–µ—Ä–∏ —Å–≤–æ—é –ø–æ–¥–≥—Ä—É–ø–ø—É:');
        return await ctx.reply('–í—ã–±–µ—Ä–∏ –ø–æ–¥–≥—Ä—É–ø–ø—É:', {
          reply_markup: replyKeyboards[UserState.AskingSubgroup]
        });
      }
      
      return await ctx.editMessageText('‚ùå –û—à–∏–±–∫–∞: –ø–æ–¥–≥—Ä—É–ø–ø—É –º–æ–∂–Ω–æ –º–µ–Ω—è—Ç—å —Ç–æ–ª—å–∫–æ —Å—Ç—É–¥–µ–Ω—Ç–∞–º —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π –≥—Ä—É–ø–ø–æ–π.');
    }
 }
});
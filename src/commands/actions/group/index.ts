import { Composer } from "grammy";
import { CommandContext, EnhancedContext } from "../../../utils/index.js";
import { GroupChat, GroupSetupState } from "../../../schemas/Group.js";
import { InlineKeyboard } from "grammy";
import { callbackIdParse } from "../../../utils/keyboards.js";

export const groupSetupHandler = new Composer<EnhancedContext>();

// Handle text input for group setup
groupSetupHandler.on("message:text", async (ctx, next) => {
  // Only handle group chats
  if (ctx.chat?.type !== "group" && ctx.chat?.type !== "supergroup")
    return next();

  const groupChat = await GroupChat.findOne({ chatId: ctx.chat.id });
  if (!groupChat || groupChat.setupState === GroupSetupState.MainMenu)
    return next();

  const text = ctx.message.text;

  if (groupChat.setupState === GroupSetupState.AskingGroup) {
    await handleGroupInput(ctx, groupChat, text);
  } else if (groupChat.setupState === GroupSetupState.AskingTime) {
    await handleTimeInput(ctx, groupChat, text);
  }
});

async function handleGroupInput(
  ctx: CommandContext,
  groupChat: GroupChat,
  groupText: string
) {
  const { scheduleApi } = ctx.commandUtils || {};
  if (!scheduleApi) {
    await ctx.reply("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!");
    return;
  }

  // Delete the user input message
  await ctx.deleteMessage().catch(() => {});

  // Delete the prompt message if we have its ID
  if (groupChat.lastPromptMessageId) {
    try {
      await ctx.api.deleteMessage(ctx.chat!.id, groupChat.lastPromptMessageId);
      groupChat.lastPromptMessageId = undefined;
      await groupChat.save();
    } catch {
      /* ignore if message already deleted */
    }
  }

  try {
    const allGroups = await scheduleApi.getGroups({ limit: 100 });
    const searchLower = groupText.toLowerCase();
    const groups = allGroups.filter((g) =>
      g.groupNumber?.toLowerCase().includes(searchLower)
    );

    if (groups.length === 0) {
      await ctx.reply("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
      return;
    }

    if (groups.length === 1) {
      // Exact match - select immediately
      const selectedGroup = groups[0];
      groupChat.selectedGroup = selectedGroup.id;
      groupChat.selectedGroupNumber = selectedGroup.groupNumber!;
      groupChat.setupState = GroupSetupState.MainMenu;
      await groupChat.save();

      const successMsg = await ctx.reply(
        `üéØ –ì—Ä—É–ø–ø–∞ ${selectedGroup.groupNumber} –≤—ã–±—Ä–∞–Ω–∞!`
      );
      // Delete success message after 2 seconds
      setTimeout(async () => {
        try {
          await ctx.api.deleteMessage(ctx.chat!.id, successMsg.message_id);
        } catch {
          /* ignore */
        }
      }, 2000);

      await showMainMenu(ctx, groupChat);
    } else {
      // Multiple matches - show selection menu
      const keyboard = new InlineKeyboard();
      groups.slice(0, 10).forEach((group) => {
        keyboard
          .text(
            group.groupNumber!,
            `group_setup:select_group:${groupChat.chatId}:${group.id}`
          )
          .row();
      });
      keyboard.text("üîô –ù–∞–∑–∞–¥", `group_setup:back:${groupChat.chatId}`);

      // Store message ID to potentially edit it later
      await ctx.reply(
        `üîç –ù–∞–π–¥–µ–Ω–æ ${groups.length} –≥—Ä—É–ø–ø${groups.length > 10 ? " (–ø–æ–∫–∞–∑–∞–Ω—ã –ø–µ—Ä–≤—ã–µ 10)" : ""}:\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é:`,
        {
          reply_markup: keyboard,
        }
      );
    }
  } catch (error) {
    console.error("Error searching groups:", error);
    await ctx.reply("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑:");
  }
}

async function handleTimeInput(
  ctx: CommandContext,
  groupChat: GroupChat,
  timeText: string
) {
  // Delete the user input message
  await ctx.deleteMessage().catch(() => {});

  // Delete the prompt message if we have its ID
  if (groupChat.lastPromptMessageId) {
    try {
      await ctx.api.deleteMessage(ctx.chat!.id, groupChat.lastPromptMessageId);
      groupChat.lastPromptMessageId = undefined;
    } catch {
      /* ignore if message already deleted */
    }
  }

  const timeRegex = /^([0-1]?[0-9]|2[0-3]):([0-5][0-9])$/;

  if (!timeRegex.test(timeText)) {
    await ctx.reply(
      "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00):"
    );
    return;
  }

  groupChat.scheduleTime = timeText;
  groupChat.setupState = GroupSetupState.MainMenu;
  await groupChat.save();

  const successMsg = await ctx.reply(
    `üïê –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: ${timeText}`
  );
  // Delete success message after 2 seconds
  setTimeout(async () => {
    try {
      await ctx.api.deleteMessage(ctx.chat!.id, successMsg.message_id);
    } catch {
      /* ignore */
    }
  }, 2000);

  await showMainMenu(ctx, groupChat);
}

// Handle group setup actions
groupSetupHandler.callbackQuery(/^group_setup:/, async (ctx) => {
  const data = ctx.callbackQuery.data!;
  const [, action, chatId] = callbackIdParse(data);

  // Verify user is admin or special developer
  const DEVELOPER_USER_ID = parseInt(process.env.DEVELOPER_USER_ID || "0");
  const isDeveloper = ctx.from!.id === DEVELOPER_USER_ID;

  if (!isDeveloper) {
    const chatMember = await ctx.api.getChatMember(
      parseInt(chatId),
      ctx.from!.id
    );
    if (
      chatMember.status !== "administrator" &&
      chatMember.status !== "creator"
    ) {
      await ctx.answerCallbackQuery(
        "‚ùå –¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏!"
      );
      return;
    }
  }

  const groupChat = await GroupChat.findOne({ chatId: parseInt(chatId) });
  if (!groupChat) {
    await ctx.answerCallbackQuery("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
    return;
  }

  switch (action) {
    case "ask_group":
      await askForGroup(ctx, groupChat);
      break;
    case "select_group":
      await selectGroup(ctx, groupChat, callbackIdParse(data)[3]); // groupId is 4th element
      break;
    case "ask_time":
      await askForTime(ctx, groupChat);
      break;
    case "toggle_subgroups":
      await toggleSubgroups(ctx, groupChat);
      break;
    case "toggle_active":
      await toggleActive(ctx, groupChat);
      break;
    case "back":
      await showMainMenu(ctx, groupChat);
      break;
    default:
      await ctx.answerCallbackQuery("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ!");
  }
});

// Simple action functions
async function selectGroup(
  ctx: CommandContext,
  groupChat: GroupChat,
  groupId: string
) {
  const { scheduleApi } = ctx.commandUtils || {};
  if (!scheduleApi) {
    await ctx.answerCallbackQuery("‚ùå API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω!");
    return;
  }

  try {
    const allGroups = await scheduleApi.getGroups({ limit: 100 });
    const selectedGroup = allGroups.find((g) => g.id?.toString() === groupId);

    if (!selectedGroup) {
      await ctx.answerCallbackQuery("‚ùå –ì—Ä—É–ø–ø–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!");
      return;
    }

    groupChat.selectedGroup = selectedGroup.id;
    groupChat.selectedGroupNumber = selectedGroup.groupNumber!;
    groupChat.setupState = GroupSetupState.MainMenu;
    await groupChat.save();

    await ctx.answerCallbackQuery(
      `üéØ –ì—Ä—É–ø–ø–∞ ${selectedGroup.groupNumber} –≤—ã–±—Ä–∞–Ω–∞!`
    );
    // Delete the group selection message first
    await ctx.deleteMessage().catch(() => {});
    await showMainMenu(ctx, groupChat);
  } catch (error) {
    console.error("Error selecting group:", error);
    await ctx.answerCallbackQuery("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≥—Ä—É–ø–ø—ã!");
  }
}

async function askForGroup(ctx: CommandContext, groupChat: GroupChat) {
  groupChat.setupState = GroupSetupState.AskingGroup;

  await ctx.editMessageText(
    "üéì <b>–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã</b>\n\nüí° –ü—Ä–∏–º–µ—Ä—ã: –¢–¶-541, –ü–û-112, –¢–≠-212\n\nüî§ –ú–æ–∂–Ω–æ –ø–∏—Å–∞—Ç—å –Ω–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é - –±–æ—Ç –Ω–∞–π–¥–µ—Ç –≤—Å–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã!\n\n‚úçÔ∏è –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–æ–º–µ—Ä –≥—Ä—É–ø–ø—ã –≤ —á–∞—Ç:",
    { parse_mode: "HTML" }
  );

  // Store the current callback message ID to delete it later
  if (ctx.callbackQuery?.message?.message_id) {
    groupChat.lastPromptMessageId = ctx.callbackQuery.message.message_id;
  }
  await groupChat.save();

  await ctx.answerCallbackQuery();
}

async function askForTime(ctx: CommandContext, groupChat: GroupChat) {
  groupChat.setupState = GroupSetupState.AskingTime;

  await ctx.editMessageText(
    "üïê <b>–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è</b>\n\nüìÖ –§–æ—Ä–º–∞—Ç: –ß–ß:–ú–ú (–Ω–∞–ø—Ä–∏–º–µ—Ä: 08:00, 19:30)\n\nüí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤—Ä–µ–º—è –≤ —á–∞—Ç:",
    { parse_mode: "HTML" }
  );

  // Store the current callback message ID to delete it later
  if (ctx.callbackQuery?.message?.message_id) {
    groupChat.lastPromptMessageId = ctx.callbackQuery.message.message_id;
  }
  await groupChat.save();

  await ctx.answerCallbackQuery();
}

async function toggleSubgroups(ctx: CommandContext, groupChat: GroupChat) {
  groupChat.sendBothSubgroups = !groupChat.sendBothSubgroups;
  await groupChat.save();

  await ctx.answerCallbackQuery(
    groupChat.sendBothSubgroups
      ? "üé≠ –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è—é—Ç—Å—è —Ä–∞–∑–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∫–∞–∂–¥–æ–π –ø–æ–¥–≥—Ä—É–ø–ø—ã!"
      : "ü§ù –¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∫–∞–º–∏ –ø–æ–¥–≥—Ä—É–ø–ø!"
  );
  await showMainMenu(ctx, groupChat);
}

async function toggleActive(ctx: CommandContext, groupChat: GroupChat) {
  groupChat.isActive = !groupChat.isActive;
  await groupChat.save();

  await ctx.answerCallbackQuery(
    groupChat.isActive
      ? "üéâ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!"
      : "üò¥ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!"
  );
  await showMainMenu(ctx, groupChat);
}

async function showMainMenu(ctx: CommandContext, groupChat: GroupChat) {
  groupChat.setupState = GroupSetupState.MainMenu;
  await groupChat.save();

  const keyboard = new InlineKeyboard()
    .text("üéì –ò–∑–º–µ–Ω–∏—Ç—å –≥—Ä—É–ø–ø—É", `group_setup:ask_group:${groupChat.chatId}`)
    .row()
    .text("üïê –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è", `group_setup:ask_time:${groupChat.chatId}`)
    .row()
    .text(
      "üé≠ –†–µ–∂–∏–º –ø–æ–¥–≥—Ä—É–ø–ø",
      `group_setup:toggle_subgroups:${groupChat.chatId}`
    )
    .row()
    .text(
      groupChat.isActive
        ? "üò¥ –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"
        : "üéâ –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è",
      `group_setup:toggle_active:${groupChat.chatId}`
    );

  const statusText = getStatusText(groupChat);

  const message = `üöÄ <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞ –¥–ª—è –≥—Ä—É–ø–ø—ã</b>\n\n${statusText}\n\nüëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:`;

  // Try to edit the callback query message first, if that fails send new message
  if (ctx.callbackQuery && ctx.editMessageText) {
    try {
      await ctx.editMessageText(message, {
        reply_markup: keyboard,
        parse_mode: "HTML",
      });
    } catch {
      // If edit fails, send new message
      await ctx.reply(message, {
        reply_markup: keyboard,
        parse_mode: "HTML",
      });
    }
  } else {
    await ctx.reply(message, {
      reply_markup: keyboard,
      parse_mode: "HTML",
    });
  }
}

function getStatusText(groupChat: GroupChat): string {
  let status = "";

  if (groupChat.selectedGroupNumber) {
    status += `üéì <b>–ì—Ä—É–ø–ø–∞:</b> ${groupChat.selectedGroupNumber}\n`;
  } else {
    status += `ü§î <b>–ì—Ä—É–ø–ø–∞ –Ω–µ –≤—ã–±—Ä–∞–Ω–∞</b>\n`;
  }

  status += `üïê <b>–í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏:</b> ${groupChat.scheduleTime}\n`;
  status += `üé≠ <b>–ü–æ–¥–≥—Ä—É–ø–ø—ã:</b> ${groupChat.sendBothSubgroups ? "–†–∞–∑–¥–µ–ª—å–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è" : "–û–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –º–µ—Ç–∫–∞–º–∏"}\n`;
  status += `${groupChat.isActive ? "üéâ" : "üò¥"} <b>–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:</b> ${groupChat.isActive ? "–í–∫–ª—é—á–µ–Ω—ã" : "–û—Ç–∫–ª—é—á–µ–Ω—ã"}`;

  return status;
}

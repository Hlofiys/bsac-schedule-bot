import {
  getGroups,
  getTeachers,
  getGroupSchedule,
  getTeacherSchedule
} from "../lib/api/client";
import type { components } from "../lib/api/scheme";

type Group = components["schemas"]["Group"];
type Teacher = components["schemas"]["Teacher"];
type GetScheduleForOneGroup = components["schemas"]["GetScheduleForOneGroup"];

export class ScheduleService {
  async getAllGroups(): Promise<Group[]> {
    try {
      return await getGroups();
    } catch (error) {
      console.error("Error fetching groups:", error);
      throw new Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  async getAllTeachers(): Promise<Teacher[]> {
    try {
      return await getTeachers();
    } catch (error) {
      console.error("Error fetching teachers:", error);
      throw new Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  async getGroupSchedule(groupId: number, dates?: string[]): Promise<GetScheduleForOneGroup[]> {
    try {
      return await getGroupSchedule(groupId, dates);
    } catch (error) {
      console.error("Error fetching group schedule:", error);
      throw new Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –≥—Ä—É–ø–ø—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  /**
   * Get schedule for a teacher
   * Note: This returns the same type as group schedules (GetScheduleForOneGroup[])
   */
  async getTeacherSchedule(teacherId: number, dates?: string[]): Promise<GetScheduleForOneGroup[]> {
    try {
      return await getTeacherSchedule(teacherId, dates);
    } catch (error) {
      console.error("Error fetching teacher schedule:", error);
      throw new Error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.");
    }
  }

  formatSchedule(schedule: GetScheduleForOneGroup[]): string {
    // Handle case when no schedule data is available
    if (!schedule || schedule.length === 0) {
      return "üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã.";
    }

    // Check if any day has schedules
    let hasAnySchedules = false;
    for (const day of schedule) {
      if (day.schedules && day.schedules.length > 0) {
        hasAnySchedules = true;
        break;
      }
    }
    
    if (!hasAnySchedules) {
      return "üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã.";
    }

    let message = "üìÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –∑–∞–Ω—è—Ç–∏–π:\n\n";
    
    for (const day of schedule) {
      // Skip days with no schedules
      if (!day.schedules || day.schedules.length === 0) {
        continue;
      }
      
      message += `üìÜ ${day.date || '–î–∞—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞'}\n`;
      
      for (const lesson of day.schedules) {
        // Add null checks for all properties
        const lessonName = (lesson.lessonSchedule?.lesson?.name) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        const teacherName = (lesson.lessonSchedule?.teacher?.fio) || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        const lessonNumber = lesson.lessonSchedule?.lessonNumber !== undefined ? lesson.lessonSchedule?.lessonNumber : "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        const cabinet = lesson.lessonSchedule?.cabinet !== undefined ? lesson.lessonSchedule?.cabinet : "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        const block = lesson.lessonSchedule?.block !== undefined ? lesson.lessonSchedule?.block : "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        const lessonType = lesson.lessonSchedule?.staticLessonType || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
        
        message += `‚è± ${lessonNumber} –ø–∞—Ä–∞ (${lessonName})\n`;
        message += `üë®‚Äçüè´ ${teacherName}\n`;
        message += `üìç –ö–∞–±–∏–Ω–µ—Ç: ${cabinet}, –ö–æ—Ä–ø—É—Å: ${block}\n`;
        message += `üìö –¢–∏–ø: ${this.translateLessonType(lessonType)}\n\n`;
      }
    }
    
    return message || "üìã –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ–∑–º–æ–∂–Ω–æ, —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –µ—â–µ –Ω–µ —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–æ –∏–ª–∏ –Ω–µ—Ç –∑–∞–Ω—è—Ç–∏–π –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã.";
 }

  private translateLessonType(type: string): string {
    switch (type) {
      case "Lecture":
        return "–õ–µ–∫—Ü–∏—è";
      case "Practical":
        return "–ü—Ä–∞–∫—Ç–∏–∫–∞";
      case "Laboratory":
        return "–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–∞—è";
      default:
        return type || "–ù–µ —É–∫–∞–∑–∞–Ω–æ";
    }
 }

  formatGroupsList(groups: Group[]): string {
    if (!groups || groups.length === 0) {
      return "–ì—Ä—É–ø–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
    }

    let message = "üë• –°–ø–∏—Å–æ–∫ –≥—Ä—É–ø–ø:\n\n";
    
    // Group by course
    const groupsByCourse: { [key: number]: Group[] } = {};
    
    for (const group of groups) {
      const course = group.course || 0; // Default to 0 if course is undefined
      if (!groupsByCourse[course]) {
        groupsByCourse[course] = [];
      }
      groupsByCourse[course].push(group);
    }
    
    // Sort courses and groups
    const sortedCourses = Object.keys(groupsByCourse)
      .map(Number)
      .sort((a, b) => a - b);
    
    for (const course of sortedCourses) {
      message += `üìö –ö—É—Ä—Å ${course}:\n`;
      const sortedGroups = groupsByCourse[course].sort((a, b) =>
        (a.groupNumber || '').localeCompare(b.groupNumber || '')
      );
      
      for (const group of sortedGroups) {
        message += `üîπ ${group.groupNumber || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
      }
      message += "\n";
    }
    
    return message;
  }

  formatTeachersList(teachers: Teacher[]): string {
    if (!teachers || teachers.length === 0) {
      return "–ü—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.";
    }

    let message = "üë®‚Äçüè´ –°–ø–∏—Å–æ–∫ –ø—Ä–µ–ø–æ–¥–∞–≤–∞—Ç–µ–ª–µ–π:\n\n";
    
    // Sort teachers by name
    const sortedTeachers = teachers.sort((a, b) =>
      (a.fio || '').localeCompare(b.fio || '')
    );
    
    for (const teacher of sortedTeachers) {
      message += `üî∏ ${teacher.fio || '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n`;
    }
    
    return message;
  }
}